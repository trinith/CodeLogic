<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
	// Variables
	bool incMajor = false;
	bool incMinor = false;
	bool incRevision = false;
	bool incBuild = false;
	
	bool resetMinor = false;
	bool resetRevision = false;
	
	string tag = "";

	// Retrieve values
	try { incMajor = Convert.ToBoolean(this.Host.ResolveParameterValue("", "", "major")); } catch { }
	try { incMinor = Convert.ToBoolean(this.Host.ResolveParameterValue("", "", "minor")); } catch { }
	try { incRevision = Convert.ToBoolean(this.Host.ResolveParameterValue("", "", "revision")); } catch { }
	try { incBuild = Convert.ToBoolean(this.Host.ResolveParameterValue("", "", "build")); } catch { }

	try { resetMinor = Convert.ToBoolean(this.Host.ResolveParameterValue("", "", "resetMinor")); } catch { }
	try { resetRevision = Convert.ToBoolean(this.Host.ResolveParameterValue("", "", "resetRevision")); } catch { }

	try { tag = this.Host.ResolveParameterValue("", "", "titleTag"); } catch { }

	// Do stuff!
	try
	{
	    string currentDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string assemblyInfo = File.ReadAllText(Path.Combine(currentDirectory,"AssemblyInfo.cs"));
        
		Regex pattern = new Regex("AssemblyVersion\\(\"(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<revision>\\d+)\\.(?<build>\\d+)\"\\)");
        MatchCollection matches = pattern.Matches(assemblyInfo);
        
		major = Convert.ToInt32(matches[0].Groups["major"].Value) + (incMajor?1:0);
		minor = Convert.ToInt32(matches[0].Groups["minor"].Value) + (incMinor?1:0);
		revision = Convert.ToInt32(matches[0].Groups["revision"].Value) + (incRevision?1:0);
        build = Convert.ToInt32(matches[0].Groups["build"].Value) + (incBuild?1:0);

		if (resetMinor)
			minor = 0;

		if (resetRevision)
			revision = 0;

		titleTag =
			(string.IsNullOrEmpty(tag))
				? "" 
				: " - " + tag;
	}
	catch (Exception e)
	{
		Console.WriteLine("Exception occurred while processing AssemblyInfo.tt");
		Console.WriteLine(e.ToString());
	}
#>

using System.Reflection;
using System.Resources;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("CodeLogic<#= this.titleTag #>")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("CodeLogic")]
[assembly: AssemblyCopyright("Copyright © ArbitraryPixel Software 2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
[assembly: NeutralResourcesLanguage("en")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
[assembly: AssemblyVersion("<#= this.major #>.<#= this.minor #>.<#= this.revision #>.<#= this.build #>")]
[assembly: AssemblyFileVersion("<#= this.major #>.<#= this.minor #>.<#= this.revision #>.<#= this.build #>")]

<#+
	int major = 0;
	int minor = 0;
    int revision = 0;
    int build = 0;
	string titleTag = "";
#>